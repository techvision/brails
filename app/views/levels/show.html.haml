.level
  .row
    .span6
      .row-fluid
        .counter{class: "counter-7"}
        %h1.gamma.level-header #{@level.level_name}
  .row
    .span3.level-scoring
      .score-wrapper
        %ul.unstyled.score.large
          - @level.calculate_coins_count.times do |count|
            %li.score-indicator{ :class => "#{'complete' if count < @topics.collect{|topic| won_topic_coins(topic)}.inject(:+)}"}
        %span.delta  #{@topics.collect{|topic| won_topic_coins(topic)}.inject(:+)} of #{@level.calculate_coins_count} coins  won
    .span9
      - @topics.each do |topic|
        .row-fluid.level-topic-wrapper.colored-block
          .span9
            .row-fluid.level-topic
              .span3
                .score-wrapper
                  %ul.unstyled.score
                    - topic_coins = topic_calculate_coins(topic).to_i
                    - topic_coins.times do |count|
                      %li.score-indicator{ :class => "#{'complete' if count < won_topic_coins(topic)}"}

              .span9.topic-details
                %h2.delta= topic.title
                %p.topic-description= topic.description  
                - if topic.contents.count == 0
                  %p.topic-description Coming soon
                - else
                  %a.btn.btn-start-topic= link_to " Start topic", level_topic_path(@level, topic)
          .span3
            - if topic_questions_count(topic) == Attempt.where(:user => current_user, :topic => topic, :solved => true).collect(&:solved).size          
              .topic-score.right
              - @count = @count + 1 
            - else
              .topic-score.wrong
.row{:style => "margin-top: 50px" }                
  -if @level.questions? and current_user.present?          
    .span3.level-scoring
      .score-wrapper
        %ul.unstyled.score.large
          - calculate_totalcoins_bonusround(@level).times do |count|
            %li.score-indicator{ :class => "#{'complete' if count < calculate_usercoins_bonusround(@level)}"}
        %span.delta   #{calculate_usercoins_bonusround(@level)} of #{calculate_totalcoins_bonusround(@level)} coins won
    .span9
      - if @level.topics.count == @count
        %input{:type => "button",:class => "btn-bonus-round unlocked",:id => "bonus_round_unlocked", :value => "Bonus Round Unlocked"}
      - else
        %button{:disabled => "true", :class => "btn-bonus-round"} Bonus Round Locked
      #bonus_round{:style => "display: none"}
        %h3 Bonus Round Questions
        - @level.questions.each do |question|
        - attempt = Attempt.where(:question => question, :user => current_user).first if current_user.attempts.count  > 0
          .span5.question{:id => "q_#{question.id}"}
            %br
            QUESTION:
            = question.query
            %br
            %br
            = simple_form_for question, :url => attempt_bonus_question_path(question), remote: true do |f|
              .control-group
                .controls
                  OPTIONS:
                  %br
                  - if attempt == nil or attempt.solved == false 
                    = f.collection_radio_buttons :options, question.options.collect{|opt| [opt.id, opt.label]}, :first,     :last
                    = f.submit 'Submit', :class => 'btn'
                    %p{:id => "answer_#{question.id}"}
                  - else
                    - question.options.each do |option|
                      = f.label option.label
  = render_shareable :url => request.url
